[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "parking-optimization"
version = "1.0.0"
description = "Real-Time Collaborative Parking Space Optimization System"
readme = "README.md"
license = { text = "MIT" }
authors = [
  { name = "Parking Optimization Team", email = "team@parkingopt.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.8"
dependencies = [
  "numpy>=1.21.0",
  "matplotlib>=3.4.0",
  "seaborn>=0.11.0",
  "pandas>=1.3.0",
  "scipy>=1.7.0",
  "folium>=0.12.0",
  "scikit-learn>=1.0.0",
  "requests>=2.25.0",
  "pydantic>=2.0.0",
  "python-dotenv>=0.19.0",
]

[project.optional-dependencies]
dev = [
  "pytest>=7.0.0",
  "pytest-cov>=4.0.0",
  "pytest-asyncio>=0.21.0",
  "pytest-benchmark>=4.0.0",
  "ruff>=0.1.0",
  "mypy>=1.0.0",
  "pre-commit>=3.0.0",
]
test = [
  "pytest>=7.0.0",
  "pytest-cov>=4.0.0",
  "pytest-asyncio>=0.21.0",
  "pytest-benchmark>=4.0.0",
]

[project.scripts]
parking-optimize = "main:main"

[project.urls]
Homepage = "https://github.com/parking-optimization/parking-optimization"
Documentation = "https://parking-optimization.readthedocs.io/"
Repository = "https://github.com/parking-optimization/parking-optimization.git"
"Bug Tracker" = "https://github.com/parking-optimization/parking-optimization/issues"

# Tool configurations
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort
  "B",  # flake8-bugbear
  "C4", # flake8-comprehensions
  "UP", # pyupgrade
]
ignore = [
  "E501", # line too long, handled by black
  "B008", # do not perform function calls in argument defaults
  "B006", # do not use mutable default arguments
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["F401", "F811"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["sklearn.*", "folium.*", "matplotlib.*", "seaborn.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
  "--strict-markers",
  "--strict-config",
  "--disable-warnings",
  "--cov=core",
  "--cov=simulation",
  "--cov=analysis",
  "--cov-report=term-missing",
  "--cov-report=html",
  "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration tests",
  "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["core", "simulation", "analysis"]
omit = ["tests/*", "*/test_*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]
